---
- name: create temp directory for tokens syncing
  local_action: file path="{{ cert_syncdir.path }}/tokens" state=directory recurse=yes
  run_once: true
  register: tokens_syncdir

- name: certs | install token generation script
  local_action: copy src=kube-gen-token.sh dest="{{ cert_syncdir.path }}/kube-gen-token.sh" mode=u+x
  run_once: true
  changed_when: false

- name: tokens | generate token for kubectl
  local_action: command
    bash -c "{{ playbook_dir }}/{{ cert_syncdir.path }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ tokens_syncdir.path }}"
  with_nested:
    - [ "system:kubectl" ]
    - [ "kubecfg"]
  register: gentoken
  run_once: true
  changed_when: "'Added' in gentoken.stdout"

- name: tokens | generate tokens for master components
  local_action: command
    bash -c "{{ playbook_dir }}/{{ cert_syncdir.path }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ tokens_syncdir.path }}"
  with_nested:
    - [ "system:controller_manager", "system:scheduler", "system:proxy" ]
    - "{{ groups['master'] }}"
  register: gentoken
  run_once: true
  changed_when: "'Added' in gentoken.stdout"

- name: tokens | generate tokens for node components
  local_action: command
    bash -c "{{ playbook_dir }}/{{ cert_syncdir.path }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ tokens_syncdir.path }}"
  with_nested:
    - [ 'system:kubelet', 'system:proxy' ]
    - "{{ groups['node'] }}"
  register: gentoken
  run_once: true
  changed_when: "'Added' in gentoken.stdout"
